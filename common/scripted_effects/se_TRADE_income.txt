TRADE_set_all_tradegood_balances = {
	every_tradegood_complex = {
		APPLY = TRADE_set_tradegood_balance
	}
}

TRADE_set_food_tradegood_balances = {
	TRADE_set_tradegood_balance = {
		tradegood = grain
	}
	TRADE_set_tradegood_balance = {
		tradegood = livestock
	}
	TRADE_set_tradegood_balance = {
		tradegood = vegetables
	}
	TRADE_set_tradegood_balance = {
		tradegood = fish
	}
	TRADE_set_tradegood_balance = {
		tradegood = tropical_fruit
	}
	TRADE_set_tradegood_balance = {
		tradegood = mediterranean_fruit
	}
	TRADE_set_tradegood_balance = {
		tradegood = temperate_fruit
	}
	TRADE_set_tradegood_balance = {
		tradegood = processed_foods
	}
}

TRADE_set_tradegood_balance = {
	# Scope: governorship
	# Function: Get the amount of money that the governorship should earn from or spend on the tradegood traded
	set_variable = {
		name = this_quarter_balance_$tradegood$
		value = DEMAND_difference_infrastructure_capped_$tradegood$
	}
	change_variable = {
		name = this_quarter_balance_$tradegood$
		multiply = var:price_$tradegood$
	}

	# Divide demand in the internal trade scope by supply
	# Then, if under 1, multiply the quarterly balance by that, reflecting that not all goods could be sold
	var:internal_trade_scope = {
		set_local_variable = {
			name = l_ITS_demand_over_supply
			value = var:demand_ITS_$tradegood$
		}
		if = {
			limit = { NOT = { var:supply_ITS_$tradegood$ = 0 } }
			change_local_variable = {
				name = l_ITS_demand_over_supply
				divide = var:supply_ITS_$tradegood$
			}
		}
	}
	if = {
		limit = { local_var:l_ITS_demand_over_supply < 1 }
		change_variable = {
			name = this_quarter_balance_$tradegood$
			multiply = local_var:l_ITS_demand_over_supply
		}
	}
	else_if = {
		limit = { 
			local_var:l_ITS_demand_over_supply > 1 # If there is more demand than availability, cap the spend to buy less based on what is available rather than spending on unobtainable stock
			var:this_quarter_balance_$tradegood$ < 0 # i.e. if spending
		}
		change_variable = {
			name = this_quarter_balance_$tradegood$
			divide = local_var:l_ITS_demand_over_supply
		}
	}
}

#### Distribution of the balance to pops

TRADE_calculate_local_wholesale_shares_for_category = {
	# Scope: governorship
	# Function: Calculate what percentage of wholesale profits goes to each pop, and save it as a variable.
	# Can be repeated for any category; this holds the definitions for the different trader groups
	TRADE_calculate_local_wholesale_share_percentage = {
		trader = upper_strata
		category = $category$
	}
	TRADE_calculate_local_wholesale_share_percentage = {
		trader = middle_strata
		category = $category$
	}
	TRADE_calculate_local_wholesale_share_percentage = {
		trader = lower_strata
		category = $category$
	}
	TRADE_calculate_local_wholesale_share_percentage = {
		trader = proletariat
		category = $category$
	}
	TRADE_calculate_local_wholesale_share_percentage = {
		trader = indentured
		category = $category$
	}
	TRADE_calculate_local_wholesale_share_percentage = {
		trader = tribesmen
		category = $category$
	}
	TRADE_calculate_local_wholesale_share_percentage = {
		trader = slaves
		category = $category$
	}

}


TRADE_calculate_local_merchant_shares_for_category = {
	# Scope: governorship
	# Function: Calculate what percentage of wholesale profits goes to each pop, and save it as a variable.
	# Can be repeated for any category; this holds the definitions for the different trader groups
	TRADE_calculate_local_merchant_share_percentage = {
		trader = upper_strata
		category = $category$
	}
	TRADE_calculate_local_merchant_share_percentage = {
		trader = middle_strata
		category = $category$
	}
	TRADE_calculate_local_merchant_share_percentage = {
		trader = lower_strata
		category = $category$
	}
	TRADE_calculate_local_merchant_share_percentage = {
		trader = proletariat
		category = $category$
	}
	TRADE_calculate_local_merchant_share_percentage = {
		trader = indentured
		category = $category$
	}
	TRADE_calculate_local_merchant_share_percentage = {
		trader = tribesmen
		category = $category$
	}
	TRADE_calculate_local_merchant_share_percentage = {
		trader = slaves
		category = $category$
	}

}

TRADE_calculate_local_wholesale_share_percentage = {
	# Scope: governorship
	# Function: Calculate the percentage share of wholesale income for the given spender type
	# Args:
	# category = "food" etc.
	# trader = "upper_strata" etc.
	if = {
		limit = {
			NOT = { TRADE_local_wholesale_share_weight_$trader$_$category$ = 0 }
			NOT = { TRADE_local_wholesale_share_weight_total_$category$ = 0 }
		}

		set_variable = {
			name = TRADE_local_wholesale_share_percentage_$trader$_$category$
			value = TRADE_local_wholesale_share_weight_$trader$_$category$
		}
		change_variable = {
			name = TRADE_local_wholesale_share_percentage_$trader$_$category$
			divide = TRADE_local_wholesale_share_weight_total_$category$
		}
		change_variable = { # Get the actual amount they will get paid
			name = TRADE_local_wholesale_share_percentage_$trader$_$category$
			multiply = TRADE_local_wholesale_share_percentage_modifier_$trader$_$category$
		}

	}
	else = {
		set_variable = {
			name = TRADE_local_wholesale_share_percentage_$trader$_$category$
			value = 0
		}
	}
}

TRADE_calculate_local_merchant_share_percentage = {
	# Scope: governorship
	# Function: Calculate the percentage share of merchant income and spending (i.e., buying wholesale goods for export) for the given spender type
	# Args:
	# category = "food" etc.
	# trader = "upper_strata" etc.
	if = {
		limit = {
			NOT = { TRADE_local_merchant_share_weight_$trader$_$category$ = 0 }
			NOT = { TRADE_local_merchant_share_weight_total_$category$ = 0 }
		}

		set_variable = {
			name = TRADE_local_merchant_share_percentage_$trader$_$category$
			value = TRADE_local_merchant_share_weight_$trader$_$category$
		}
		change_variable = {
			name = TRADE_local_merchant_share_percentage_$trader$_$category$
			divide = TRADE_local_merchant_share_weight_total_$category$
		}
		change_variable = { # Get the actual amount they will get paid
			name = TRADE_local_merchant_share_percentage_$trader$_$category$
			multiply = TRADE_local_merchant_share_percentage_modifier_$trader$_$category$
		}

	}
	else = {
		set_variable = {
			name = TRADE_local_merchant_share_percentage_$trader$_$category$
			value = 0
		}
	}
}

TRADE_calculate_local_consumer_spending_food_cheap = {
	# Scope: governorship
	# Function: Get the total amount of spending on food goods whose prices are under the mean absolute deviation
}

TRADE_calculate_local_wholesale_income_total_food = {
	# Scope: governorship
	# Function: Get the total wholesale income for a period, by getting the profit of goods sold extraregionally.
	# category = "food" etc.
	set_variable = {
		name = TRADE_local_wholesale_income_total_food
		value = 0.001 # To avoid div/0s
	}
	if = {
		limit = {
			var:this_quarter_balance_grain > 0
		}
		change_variable = {
			name = TRADE_local_wholesale_income_total_food
			add = var:this_quarter_balance_grain
		}
	}
	if = {
		limit = {
			var:this_quarter_balance_livestock > 0
		}
		change_variable = {
			name = TRADE_local_wholesale_income_total_food
			add = var:this_quarter_balance_livestock
		}
	}
	if = {
		limit = {
			var:this_quarter_balance_vegetables > 0
		}
		change_variable = {
			name = TRADE_local_wholesale_income_total_food
			add = var:this_quarter_balance_vegetables
		}
	}
	if = {
		limit = {
			var:this_quarter_balance_fish > 0
		}
		change_variable = {
			name = TRADE_local_wholesale_income_total_food
			add = var:this_quarter_balance_fish
		}
	}
	if = {
		limit = {
			var:this_quarter_balance_tropical_fruit > 0
		}
		change_variable = {
			name = TRADE_local_wholesale_income_total_food
			add = var:this_quarter_balance_tropical_fruit
		}
	}
	if = {
		limit = {
			var:this_quarter_balance_mediterranean_fruit > 0
		}
		change_variable = {
			name = TRADE_local_wholesale_income_total_food
			add = var:this_quarter_balance_mediterranean_fruit
		}
	}
	if = {
		limit = {
			var:this_quarter_balance_temperate_fruit > 0
		}
		change_variable = {
			name = TRADE_local_wholesale_income_total_food
			add = var:this_quarter_balance_temperate_fruit
		}
	}
}

TRADE_calculate_local_wholesale_income_all_pops_food = {
	TRADE_calculate_local_wholesale_income = {
		trader = upper_strata
		category = food
	}
	TRADE_calculate_local_wholesale_income = {
		trader = middle_strata
		category = food
	}
	TRADE_calculate_local_wholesale_income = {
		trader = lower_strata
		category = food
	}
	TRADE_calculate_local_wholesale_income = {
		trader = proletariat
		category = food
	}
	TRADE_calculate_local_wholesale_income = {
		trader = tribesmen
		category = food
	}
	TRADE_calculate_local_wholesale_income = {
		trader = indentured
		category = food
	}
	TRADE_calculate_local_wholesale_income = {
		trader = slaves
		category = food
	}
}

TRADE_calculate_local_wholesale_income = {
	# Scope: governorship
	# Function: Calculate the actual wholesale income for the named trader group and category, by multiplying the total wholesale income by their percentage share
	set_variable = {
		name = TRADE_local_wholesale_income_$trader$_$category$
		value = var:TRADE_local_wholesale_income_total_$category$
	}
	change_variable = {
		name = TRADE_local_wholesale_income_$trader$_$category$
		multiply = var:TRADE_local_wholesale_share_percentage_$trader$_$category$
	}
}

TRADE_grant_wholesale_income = {
	# Scope: governorship
	# Function: Grant the specified pop group the amount of income from wholesale
}

# MERCHANT INCOME

TRADE_calculate_local_merchant_income_total_food = {
	# Scope: governorship
	# Function: Get the total merchant income for a period, by getting the profit of goods sold extraregionally.
	# category = "food" etc.
	set_variable = {
		name = TRADE_local_merchant_income_total_food
		value = var:this_quarter_balance_grain
	}
	change_variable = {
		name = TRADE_local_merchant_income_total_food
		add = var:this_quarter_balance_livestock
	}
	change_variable = {
		name = TRADE_local_merchant_income_total_food
		add = var:this_quarter_balance_vegetables
	}
	change_variable = {
		name = TRADE_local_merchant_income_total_food
		add = var:this_quarter_balance_fish
	}
	change_variable = {
		name = TRADE_local_merchant_income_total_food
		add = var:this_quarter_balance_tropical_fruit
	}
	change_variable = {
		name = TRADE_local_merchant_income_total_food
		add = var:this_quarter_balance_mediterranean_fruit
	}
	change_variable = {
		name = TRADE_local_merchant_income_total_food
		add = var:this_quarter_balance_temperate_fruit
	}
}

TRADE_calculate_local_merchant_income_all_pops_food = {
	TRADE_calculate_local_merchant_income = {
		trader = upper_strata
		category = food
	}
	TRADE_calculate_local_merchant_income = {
		trader = middle_strata
		category = food
	}
	TRADE_calculate_local_merchant_income = {
		trader = lower_strata
		category = food
	}
	TRADE_calculate_local_merchant_income = {
		trader = proletariat
		category = food
	}
	TRADE_calculate_local_merchant_income = {
		trader = tribesmen
		category = food
	}
	TRADE_calculate_local_merchant_income = {
		trader = indentured
		category = food
	}
	TRADE_calculate_local_merchant_income = {
		trader = slaves
		category = food
	}
}

TRADE_calculate_local_merchant_income = {
	# Scope: governorship
	# Function: Calculate the actual merchant income for the named trader group and category, by multiplying the total merchant income by their percentage share
	set_variable = {
		name = TRADE_local_merchant_income_$trader$_$category$
		value = var:TRADE_local_merchant_income_total_$category$
	}
	change_variable = {
		name = TRADE_local_merchant_income_$trader$_$category$
		multiply = var:TRADE_local_merchant_share_percentage_$trader$_$category$
	}
}